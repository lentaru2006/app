---
- name: Search for the latest AMAZON Linux AMI
  ec2_ami_find:
    region: "{{ vpc_region }}"
    ami_id: "{{ ami_id }}"
    owner: "{{ ami_owner }}"
    sort: name
    sort_order: descending
    sort_end: 1
    no_result_action: fail
  register: ami_find_result

- name: Create EC2 Instance(s)
  ec2:
    region: "{{ vpc_region }}"
    group: "{{ ec2_security_group_name }}"
    keypair: "{{ ec2_key_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ami_find_result.results[0].ami_id }}"
    vpc_subnet_id: "{{ item.1 }}"
    assign_public_ip: yes
    wait: True
    wait_timeout: 600
    user_data: "{{lookup('template', '../templates/cloud-init-script.j2')}}"
    instance_tags:
      Name: "{{ vpc_name }}-docker-registry"
      Environment: "{{ ENVIRONMENT }}"
      Server_Role: "docker-registry"
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: "{{ ec2_volume_size }}"
        delete_on_termination: yes
    count: "{{ ec2_count }}"
  with_indexed_items: "{{ ec2_subnet_id[0] }}"
  register: ec2

- set_fact:
    instances_id_list: "{{ ec2.results | get_ec2_info('id') }}"

- name: Add the newly created EC2 instance(s) to the local host group (located at ./inventory/hosts)
  lineinfile:
    dest: "./inventory/hosts" 
    regexp: "{{ item }}" 
    insertbefore: "[docker_registry]" 
    line: "{{ item }}"
  with_items: "{{ ec2.results | get_ec2_info('public_ip') }}"
 
- name: Wait for SSH to come up on EC2 Instance(s)
  wait_for:
    host: "{{ item }}" 
    port: 22 
    search_regex: OpenSSH
    delay: 10
  with_items: "{{ ec2.results | get_ec2_info('public_ip') }}"

